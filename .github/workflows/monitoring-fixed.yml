name: Health Check & Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  health-check:
    name: Service Health Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [production, staging]

    steps:
      - name: Set environment URLs
        id: urls
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            echo "api_url=https://api.insurge-ai.com" >> $GITHUB_OUTPUT
            echo "docs_url=https://api.insurge-ai.com/docs" >> $GITHUB_OUTPUT
          else
            echo "api_url=https://staging-api.insurge-ai.com" >> $GITHUB_OUTPUT
            echo "docs_url=https://staging-api.insurge-ai.com/docs" >> $GITHUB_OUTPUT
          fi

      - name: Check API Health
        id: health_check
        run: |
          response=$(curl -s -w "%{http_code}" -o /tmp/response.json "${{ steps.urls.outputs.api_url }}/health" || echo "000")

          if [ "$response" == "200" ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.environment }} API is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ ${{ matrix.environment }} API health check failed (HTTP $response)"
            exit 1
          fi

      - name: Check Database Connectivity
        run: |
          response=$(curl -s -w "%{http_code}" "${{ steps.urls.outputs.api_url }}/health/db" || echo "000")

          if [ "$response" == "200" ]; then
            echo "✅ ${{ matrix.environment }} Database connectivity OK"
          else
            echo "❌ ${{ matrix.environment }} Database connectivity failed"
            exit 1
          fi

      - name: Check Redis Connectivity
        run: |
          response=$(curl -s -w "%{http_code}" "${{ steps.urls.outputs.api_url }}/health/redis" || echo "000")

          if [ "$response" == "200" ]; then
            echo "✅ ${{ matrix.environment }} Redis connectivity OK"
          else
            echo "❌ ${{ matrix.environment }} Redis connectivity failed"
            exit 1
          fi

      - name: Check API Documentation
        run: |
          response=$(curl -s -w "%{http_code}" "${{ steps.urls.outputs.docs_url }}" || echo "000")

          if [ "$response" == "200" ]; then
            echo "✅ ${{ matrix.environment }} API documentation accessible"
          else
            echo "❌ ${{ matrix.environment }} API documentation not accessible"
          fi

      - name: Performance Test
        run: |
          # Simple response time test
          response_time=$(curl -s -w "%{time_total}" -o /dev/null "${{ steps.urls.outputs.api_url }}/health")

          # Convert to milliseconds
          response_time_ms=$(echo "$response_time * 1000" | bc)

          echo "⏱️ ${{ matrix.environment }} API response time: ${response_time_ms}ms"

          # Alert if response time > 5000ms (5 seconds)
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${response_time_ms}ms"
          fi

  # Check Enhanced Chat Functionality
  chat-functionality-check:
    name: Chat System Health Check
    runs-on: ubuntu-latest
    needs: health-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests

      - name: Test Chat API Endpoints
        env:
          API_URL: https://api.insurge-ai.com
          TEST_EMAIL: test@insurge-ai.com
          TEST_PASSWORD: test-password
        run: |
          python -c "
          import requests
          import json
          import os

          base_url = os.environ.get('API_URL', 'http://localhost:8000') + '/api/v1'

          # Test user login
          try:
              login_data = {
                  'email': os.environ.get('TEST_EMAIL'),
                  'password': os.environ.get('TEST_PASSWORD')
              }
              
              response = requests.post(f'{base_url}/auth/login', json=login_data, timeout=10)
              
              if response.status_code == 200:
                  token = response.json()['access_token']
                  headers = {'Authorization': f'Bearer {token}'}
                  
                  # Test getting user sessions
                  sessions_response = requests.get(f'{base_url}/chat/sessions', headers=headers, timeout=10)
                  
                  if sessions_response.status_code == 200:
                      print('✅ Enhanced Chat API endpoints are working')
                  else:
                      print(f'⚠️ Chat sessions endpoint returned: {sessions_response.status_code}')
              else:
                  print(f'⚠️ Login endpoint returned: {response.status_code}')
                  
          except requests.exceptions.RequestException as e:
              print(f'❌ Chat API health check failed: {e}')
          "

  # System Metrics Collection
  collect-metrics:
    name: Collect System Metrics
    runs-on: ubuntu-latest
    needs: health-check
    if: always()

    steps:
      - name: Collect and Store Metrics
        run: |
          # Create a simple metrics file
          echo "timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" > metrics.json
          echo "workflow_run: ${{ github.run_id }}" >> metrics.json
          echo "status: ${{ needs.health-check.result }}" >> metrics.json

          # In a real scenario, you'd send this to your monitoring system
          echo "📊 Metrics collected for monitoring dashboard"
