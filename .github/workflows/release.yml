name: Release Management

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      release_type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

jobs:
  # Validate Release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Check test coverage
        run: |
          coverage_percent=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.1f}')
          ")

          echo "Test coverage: $coverage_percent%"

          if (( $(echo "$coverage_percent < 80.0" | bc -l) )); then
            echo "❌ Test coverage is below 80%. Current: $coverage_percent%"
            exit 1
          fi

          echo "✅ Test coverage meets requirements: $coverage_percent%"

  # Build Release Assets
  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build Docker images
        run: |
          # Production image
          docker build -f Dockerfile.prod -t insurge-ai-backend:${{ steps.version.outputs.version }} .
          docker build -f Dockerfile.prod -t insurge-ai-backend:latest .

          # Development image
          docker build -t insurge-ai-backend:${{ steps.version.outputs.version }}-dev .

          echo "✅ Docker images built successfully"

      - name: Save Docker images
        run: |
          docker save insurge-ai-backend:${{ steps.version.outputs.version }} | gzip > insurge-ai-backend-${{ steps.version.outputs.version }}.tar.gz
          docker save insurge-ai-backend:${{ steps.version.outputs.version }}-dev | gzip > insurge-ai-backend-${{ steps.version.outputs.version }}-dev.tar.gz

      - name: Generate release notes
        run: |
          # Create release notes
          cat > RELEASE_NOTES.md << 'EOF'
          # Release ${{ steps.version.outputs.version }}

          ## 🚀 New Features
          - Multi-user chat system with role-based permissions
          - Enhanced WebSocket support for real-time messaging
          - Public and private chat sessions
          - Session participant management
          - AI-powered chat responses

          ## 🔧 Improvements
          - Enhanced database models with proper relationships
          - Improved API documentation
          - Better error handling and validation
          - Comprehensive test coverage

          ## 🛡️ Security
          - JWT-based authentication
          - Role-based access control
          - Input validation and sanitization
          - Security scanning integration

          ## 📦 Technical Details
          - **Backend**: FastAPI + SQLAlchemy
          - **Database**: PostgreSQL with Alembic migrations
          - **Cache**: Redis for session management
          - **WebSockets**: Real-time communication
          - **Testing**: Comprehensive test suite with pytest
          - **Security**: Integrated security scanning

          ## 🐳 Docker Images
          - Production: `insurge-ai-backend:${{ steps.version.outputs.version }}`
          - Development: `insurge-ai-backend:${{ steps.version.outputs.version }}-dev`
          - Latest: `insurge-ai-backend:latest`

          ## 📋 Migration Guide

          ### Database Migration
          ```bash
          # Run database migrations
          alembic upgrade head
          ```

          ### Environment Variables
          Make sure to set the following environment variables:
          - `DATABASE_URL`: PostgreSQL connection string
          - `REDIS_URL`: Redis connection string  
          - `SECRET_KEY`: JWT secret key
          - `OPENAI_API_KEY`: OpenAI API key for AI features

          ### Docker Deployment
          ```bash
          # Pull and run the latest version
          docker run -d -p 8000:8000 insurge-ai-backend:${{ steps.version.outputs.version }}
          ```

          ## 🔗 Links
          - [API Documentation](https://docs.insurge-ai.com)
          - [GitHub Repository](https://github.com/insurge-ai/backend)
          - [Docker Hub](https://hub.docker.com/r/insurge-ai/backend)
          EOF

      - name: Upload release assets
        uses: actions/upload-artifact@v3
        with:
          name: release-assets-${{ steps.version.outputs.version }}
          path: |
            insurge-ai-backend-*.tar.gz
            RELEASE_NOTES.md

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets-${{ needs.build-release.outputs.version }}

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build-release.outputs.version }}
          release_name: 🚀 Insurge AI Backend ${{ needs.build-release.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Production Docker Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: insurge-ai-backend-${{ needs.build-release.outputs.version }}.tar.gz
          asset_name: insurge-ai-backend-${{ needs.build-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Development Docker Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: insurge-ai-backend-${{ needs.build-release.outputs.version }}-dev.tar.gz
          asset_name: insurge-ai-backend-${{ needs.build-release.outputs.version }}-dev.tar.gz
          asset_content_type: application/gzip

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-release, create-release]

    steps:
      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying ${{ needs.build-release.outputs.version }} to staging environment..."

          # In a real scenario, this would:
          # 1. Pull the Docker image
          # 2. Update the staging environment
          # 3. Run health checks
          # 4. Notify team of deployment

          echo "✅ Staging deployment completed"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-release, create-release, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying ${{ needs.build-release.outputs.version }} to production environment..."

          # In a real scenario, this would:
          # 1. Pull the Docker image
          # 2. Update the production environment with rolling deployment
          # 3. Run comprehensive health checks
          # 4. Update monitoring dashboards
          # 5. Notify team and stakeholders

          echo "✅ Production deployment completed"

  # Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [build-release, deploy-production]
    if: always()

    steps:
      - name: Notify Teams
        run: |
          echo "📢 Notifying teams about release ${{ needs.build-release.outputs.version }}"

          # In a real scenario, this would:
          # 1. Send Slack/Teams notifications
          # 2. Update project management tools
          # 3. Send email notifications to stakeholders
          # 4. Update changelog
          # 5. Create next milestone

          echo "✅ Post-release notifications completed"

      - name: Update Documentation
        run: |
          echo "📝 Updating release documentation"

          # Documentation updates would happen here
          echo "✅ Documentation updated"

      - name: Performance Baseline
        run: |
          echo "📊 Creating performance baseline for ${{ needs.build-release.outputs.version }}"

          # Performance monitoring setup
          echo "✅ Performance baseline established"
